#!/bin/bash
#
# Gordon epilogue, called on the MOM.
#
# See the Torque docs for reference:
# http://docs.adaptivecomputing.com/torque/Content/topics/12-appendices/prologueAndEpliogueScripts.htm

PBS_JOBID=$1
PBS_USER=$2
PBS_GROUP=$3
PBS_JOBNAME=$4
PBS_SESSION_ID=$5
PBS_RESOURCE_LIMITS=$6
PBS_RESOURCES_USED=$7
JOB_QUEUE=$8
JOB_ACCT=$9
JOB_EXIT_CODE=$10

TORQUE_HOME=/var/spool/torque

this_host=$(/bin/hostname -s)

function check_status(){
    # $1 = expected value
    # $2 = status
    # $3 = message if different
    # Offline node if any checks fail and exit

    if [[ "$1" != "$2" ]] ; then
        note=$3
        /opt/torque/bin/pbsnodes -oN "$note" $this_host
        /usr/bin/logger -p local0.alert "Node offlined due to: $note"
        exit -1
    fi
}

function user_cleanup(){
    # Called at end of last job by user to:
    #  * killall PIDs
    #  * semaphores
    #  * shm
    #  * remove /tmp files

    /usr/bin/killall -9 -u $PBS_USER 

    # kill leftover allocated semiphores
    for S in $(/usr/bin/ipcs -s | /bin/grep "$PBS_USER" | /bin/awk '{print $2}') ; do
        /usr/bin/ipcrm -s $S 
    done

    # kill leftover allocated shared memory
    for M in $(/usr/bin/ipcs -m | /bin/grep "$PBS_USER" | /bin/grep -v key | /bin/awk '{print $2}') ; do
        /usr/bin/ipcrm -m $M
    done

    # Left Over processes that do not kill
    LO=$(/bin/ps -u $PBS_USER -o "pid=")
    # wait a little while and check again
    if [[ -n "$LO" ]] ; then
        /bin/sleep 10
    fi

    hung_pids=$(/bin/ps -u $PBS_USER -o "pid=")
    if [[ -n "$hung_pids" ]] ; then
        for i in $hung_pids ; do
            /usr/bin/logger -p local0.alert "Leftover PID $i from PBS_JOBID $PBS_JOBID"
        done
        # Force node offline
        check_status 0 1 "Leftover process from $PBS_JOBID"
    fi

    # Remove any files the user created in /tmp
    # Don't remcurse to remove directories, only remove files
    /bin/find /tmp -user $PBS_USER -type 'f' -print0 | /usr/bin/xargs -0 -r rm -f  
}


if [[ -f /etc/sysconfig/pbs_mom ]] ; then
    . /etc/sysconfig/pbs_mom
if

# Check for whether node is dedicated or shared

if [[ $JOB_QUEUE != "shared" ]] ; then
    # Dedicate use, clean up all job lock files
    /bin/rm -f /tmp/PBS_TEMP_*

    # Make sure access.conf is clean
    /bin/echo '-:ALL EXCEPT root (wheel) (xsede-admin):ALL' > /etc/security/access.conf
    user_cleanup
else
    # Shared use, only remove up this job's lock file
    /bin/su - $PBS_USER -c "/bin/rm -f /tmp/PBS_TEMP_$PBS_JOBID"    

    # Remove user from access.conf
    # N.B. This only removes the first entry
    /bin/sed -i "s/$PBS_USER//" /etc/security/access.conf 

    # Check for other jobs before cleaning up user activity
    other_jobs=$(/bin/find /tmp -maxdepth 1 -name 'PBS_TEMP_*' -user $PBS_USER)
    if [[ -z "$other_jobs" ]] ; then
        user_cleanup
    else
        # Kill process group of job
        /bin/kill -9 -$PBS_SESSION_ID
    fi
fi

# Record current /scratch usage
block_usage=$(/bin/df -B 1024 /scratch | /bin/grep scratch)
inode_usage=$(/bin/df -i /scratch | /bin/grep scratch)
/usr/bin/logger -p local0.alert "sdsc_stats job end $PBS_JOBID $PBS_USER local scratch block usage $block_usage"
/usr/bin/logger -p local0.alert "sdsc_stats job end $PBS_JOBID $PBS_USER local scratch inode usage $inode_usage"

# Remove local per job scratch space
if [[ "$PBS_FLASH" == "noflash" ]]; then
  check_status 0 0 "noflash node"
else
 /bin/rm -rf /scratch/$PBS_USER/$PBS_JOBID
 check_status 0 $? "Cannot remove local scratch space"
fi 

# Mother superior removes Oasis scratch dir if empty
if [[ -e $TORQUE_HOME/aux/$PBS_JOBID ]] ; then
    /bin/rmdir --ignore-fail-on-non-empty /oasis/scratch/$PBS_USER/$PBS_JOBID
    check_status 0 $? "Lustre issue, cannot remove Oasis scratch dir for $PBS_JOBID"
fi

# Clean up /tmp
# Get rid of all ordinary files in the /tmp directory older than 168h (7 days)
# and not accessed or modified in the past 168 hours.
/usr/bin/find /tmp -xdev -atime +8 -mtime +8 -type 'f' -print0 | /usr/bin/xargs -0 -r rm -f

exit 0
